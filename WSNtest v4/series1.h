#if !defined(AFX_SERIES1_H__9C61EA95_03BC_419A_9685_20B18ED292E7__INCLUDED_)
#define AFX_SERIES1_H__9C61EA95_03BC_419A_9685_20B18ED292E7__INCLUDED_

#if _MSC_VER > 1000
#pragma once
#endif // _MSC_VER > 1000
// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.

/////////////////////////////////////////////////////////////////////////////
// CSeries1 wrapper class

class CSeries1 : public COleDispatchDriver
{
public:
	CSeries1() {}		// Calls COleDispatchDriver default constructor
	CSeries1(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CSeries1(const CSeries1& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Attributes
public:

// Operations
public:
	BOOL GetActive();
	void SetActive(BOOL bNewValue);
	LPDISPATCH GetAsArea();
	LPDISPATCH GetAsArrow();
	LPDISPATCH GetAsBar();
	LPDISPATCH GetAsBubble();
	LPDISPATCH GetAsCandle();
	LPDISPATCH GetAsErrorBar();
	LPDISPATCH GetAsFastLine();
	LPDISPATCH GetAsGantt();
	LPDISPATCH GetAsHorizBar();
	LPDISPATCH GetAsLine();
	LPDISPATCH GetAsPie();
	LPDISPATCH GetAsPoint();
	LPDISPATCH GetAsPolar();
	LPDISPATCH GetAsShape();
	LPDISPATCH GetAsSurface();
	LPDISPATCH GetAsVolume();
	unsigned long GetColor();
	void SetColor(unsigned long newValue);
	BOOL GetColorEachPoint();
	void SetColorEachPoint(BOOL bNewValue);
	long GetCount();
	short GetCursor();
	void SetCursor(short nNewValue);
	VARIANT GetDataSource();
	void SetDataSource(const VARIANT& newValue);
	long GetFirstValueIndex();
	LPDISPATCH GetFunctionType();
	long GetHorizontalAxis();
	void SetHorizontalAxis(long nNewValue);
	CString GetLabelsSource();
	void SetLabelsSource(LPCTSTR lpszNewValue);
	long GetLastValueIndex();
	LPDISPATCH GetMarks();
	CString GetName();
	void SetName(LPCTSTR lpszNewValue);
	CString GetPercentFormat();
	void SetPercentFormat(LPCTSTR lpszNewValue);
	unsigned long GetPointColor(long Index);
	void SetPointColor(long Index, unsigned long newValue);
	CString GetPointLabel(long Index);
	void SetPointLabel(long Index, LPCTSTR lpszNewValue);
	double GetPointValue(long Index);
	void SetPointValue(long Index, double newValue);
	long GetSeriesType();
	BOOL GetShowInLegend();
	void SetShowInLegend(BOOL bNewValue);
	CString GetTitle();
	void SetTitle(LPCTSTR lpszNewValue);
	CString GetValueFormat();
	void SetValueFormat(LPCTSTR lpszNewValue);
	CString GetValueMarkText(long ValueIndex);
	long GetVerticalAxis();
	void SetVerticalAxis(long nNewValue);
	LPDISPATCH GetXValues();
	LPDISPATCH GetYValues();
	long GetZOrder();
	long Add(double AValue, LPCTSTR ALabel, unsigned long Value);
	long AddNull(LPCTSTR SomeLabel);
	long AddXY(double AX, double AY, LPCTSTR ALabel, unsigned long Value);
	long CalcXPos(long SomeValueIndex);
	long CalcXPosValue(double SomeValue);
	long CalcXSizeValue(double SomeValue);
	long CalcYPos(long SomeValueIndex);
	long CalcYPosValue(double SomeValue);
	long CalcYSizeValue(double SomeValue);
	void CheckDataSource();
	void Clear();
	long Clicked(long XCoord, long YCoord);
	void Delete(long Index);
	void FillSampleValues(long NumValues);
	long GetMousePoint();
	BOOL IsNull(long ValueIndex);
	void RefreshSeries();
	void SetFunction(long AFunction);
	void SwapValues(long a, long b);
	double XScreenToValue(long ScreenCoord);
	CString XValueToText(double SomeValue);
	double YScreenToValue(long ScreenCoord);
	CString YValueToText(double SomeValue);
	LPDISPATCH GetAsBezier();
	LPDISPATCH GetAsContour();
	LPDISPATCH GetAsError();
	LPDISPATCH GetAsPoint3D();
	LPDISPATCH GetAsRadar();
	long AddNullXY(double X, double Y, LPCTSTR ALabel);
	CString LegendString(long LegendIndex, long LegendTextStyle);
	unsigned long LegendItemColor(long LegendIndex);
	long CountLegendItems();
	long LegendToValueIndex(long LegendIndex);
	long VisibleCount();
	void AssignValues(long SeriesIndex);
	long GetHorizontalAxisCustom();
	void SetHorizontalAxisCustom(long nNewValue);
	long GetVerticalAxisCustom();
	void SetVerticalAxisCustom(long nNewValue);
	LPDISPATCH GetAsClock();
	LPDISPATCH GetAsWindRose();
	LPDISPATCH GetAsBar3D();
	LPDISPATCH GetAsImageBar();
	void DisconnectAxisCustom(BOOL IsHorizontal);
	LPDISPATCH GetMouseValues();
	void AddArray(long ArraySize, const VARIANT& YArray, const VARIANT& XArray);
	long GetDepth();
	void SetDepth(long nNewValue);
	LPDISPATCH GetAsDonut();
	LPDISPATCH GetAsTriSurface();
	LPDISPATCH GetAsBoxPlot();
	LPDISPATCH GetAsHorizBoxPlot();
	LPDISPATCH GetAsHistogram();
	LPDISPATCH GetAsColorGrid();
	LPDISPATCH GetAsHorizLine();
	LPDISPATCH GetAsBarJoin();
	LPDISPATCH GetAsHighLow();
	LPDISPATCH GetAsWaterfall();
	LPDISPATCH GetAsSmith();
	LPDISPATCH GetAsPyramid();
	LPDISPATCH GetAsMap();
	LPDISPATCH GetAsFunnel();
	LPDISPATCH GetAsCalendar();
	void FreeDatasource(BOOL SurePrompt);
	long GetDatasourceType();
	void SetDatasourceType(long nNewValue);
	LPDISPATCH GetValueLists();
	BOOL IsNan(double Value);
	void DeleteRange(long Start, long Quantity);
};

//{{AFX_INSERT_LOCATION}}
// Microsoft Visual C++ will insert additional declarations immediately before the previous line.

#endif // !defined(AFX_SERIES1_H__9C61EA95_03BC_419A_9685_20B18ED292E7__INCLUDED_)
